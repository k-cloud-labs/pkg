// Code generated by MockGen. DO NOT EDIT.
// Source: client/listers/policy/v1alpha1/overridepolicy.go

// Package overridemanager is a generated GoMock package.
package overridemanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/k-cloud-labs/pkg/apis/policy/v1alpha1"
	v1alpha10 "github.com/k-cloud-labs/pkg/client/listers/policy/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockOverridePolicyLister is a mock of OverridePolicyLister interface.
type MockOverridePolicyLister struct {
	ctrl     *gomock.Controller
	recorder *MockOverridePolicyListerMockRecorder
}

// MockOverridePolicyListerMockRecorder is the mock recorder for MockOverridePolicyLister.
type MockOverridePolicyListerMockRecorder struct {
	mock *MockOverridePolicyLister
}

// NewMockOverridePolicyLister creates a new mock instance.
func NewMockOverridePolicyLister(ctrl *gomock.Controller) *MockOverridePolicyLister {
	mock := &MockOverridePolicyLister{ctrl: ctrl}
	mock.recorder = &MockOverridePolicyListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverridePolicyLister) EXPECT() *MockOverridePolicyListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOverridePolicyLister) List(selector labels.Selector) ([]*v1alpha1.OverridePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1alpha1.OverridePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOverridePolicyListerMockRecorder) List(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOverridePolicyLister)(nil).List), selector)
}

// OverridePolicies mocks base method.
func (m *MockOverridePolicyLister) OverridePolicies(namespace string) v1alpha10.OverridePolicyNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverridePolicies", namespace)
	ret0, _ := ret[0].(v1alpha10.OverridePolicyNamespaceLister)
	return ret0
}

// OverridePolicies indicates an expected call of OverridePolicies.
func (mr *MockOverridePolicyListerMockRecorder) OverridePolicies(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverridePolicies", reflect.TypeOf((*MockOverridePolicyLister)(nil).OverridePolicies), namespace)
}

// MockOverridePolicyNamespaceLister is a mock of OverridePolicyNamespaceLister interface.
type MockOverridePolicyNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockOverridePolicyNamespaceListerMockRecorder
}

// MockOverridePolicyNamespaceListerMockRecorder is the mock recorder for MockOverridePolicyNamespaceLister.
type MockOverridePolicyNamespaceListerMockRecorder struct {
	mock *MockOverridePolicyNamespaceLister
}

// NewMockOverridePolicyNamespaceLister creates a new mock instance.
func NewMockOverridePolicyNamespaceLister(ctrl *gomock.Controller) *MockOverridePolicyNamespaceLister {
	mock := &MockOverridePolicyNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockOverridePolicyNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverridePolicyNamespaceLister) EXPECT() *MockOverridePolicyNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOverridePolicyNamespaceLister) Get(name string) (*v1alpha1.OverridePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1alpha1.OverridePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOverridePolicyNamespaceListerMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOverridePolicyNamespaceLister)(nil).Get), name)
}

// List mocks base method.
func (m *MockOverridePolicyNamespaceLister) List(selector labels.Selector) ([]*v1alpha1.OverridePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1alpha1.OverridePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOverridePolicyNamespaceListerMockRecorder) List(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOverridePolicyNamespaceLister)(nil).List), selector)
}
